@use "util";

@layer components {
	%default-input-range {
		box-shadow: none;
		border: none;
		outline: none;
		pointer-events: all;
		inline-size: 100%;
		appearance: none;


		&::-webkit-slider-thumb,
		&::-webkit-slider-runnable-track,
		&::-webkit-slider-container {
			appearance: none;
			box-sizing: border-box;
			/* stylelint-disable-next-line property-no-deprecated */
			-webkit-user-modify: read-only !important;
		}

		&::-webkit-slider-container,
		&::-webkit-slider-runnable-track {
			min-inline-size: 0;
			flex: 1 1 0%;
		}

		&::-webkit-slider-thumb,
		&::-webkit-slider-runnable-track {
			display: block;
		}

		&::-webkit-slider-container {
			display: flex;
		}

		&::-webkit-slider-runnable-track {
			align-self: center;
		}
	}

	.slider {
		display: flex;
		align-items: center;
		position: relative;

		--progress: .5;
		--thumb-height: 2rem;
		--track-height: calc(var(--thumb-height) / 3);
		--thumb-width: .3rem;

		input {
			@extend %default-input-range;

			position: relative;

			&::-webkit-slider-thumb {
				border-radius: util.$inf;
				background-color: var(--color-bg-fg);
			}
		}

		> .progress,
		> .remainder {
			position: absolute;
		}

		> .progress {
			background-color: var(--color-primary);
		}

		> .remainder {
			background-color: var(--color-bg-fg-700);
		}

		// bad name
		// This is needed to keep the end of the progress track always at the center of the thumb
		$width-from-left: calc(var(--progress) * 100% + ((var(--progress) - .5) * -1 * var(--thumb-width)));

		&.vertical {
			writing-mode: vertical-rl;
			transform: rotate(180deg);

			&.reverse {
				transform: none;
			}

			input::-webkit-slider-thumb {
				height: var(--thumb-width);
				width: var(--thumb-height);
			}

			> .progress,
			> .remainder {
				block-size: var(--track-height);
			}

			> .progress {
				border-top-left-radius: util.$inf;
				border-top-right-radius: util.$inf;
				height: $width-from-left;

				// * 1.5 to account for the fact that we start in it's center
				$guh: calc(100% - var(--thumb-width) * 1.5);

				clip-path: polygon(0 0, 100% 0, 100% $guh, 0 $guh);
			}

			> .remainder {
				border-bottom-left-radius: util.$inf;
				border-bottom-right-radius: util.$inf;
				top: $width-from-left;
				bottom: 0;

				// * 1.5 to account for the fact that we start in it's center
				$guh: calc(var(--thumb-width) * 1.5);

				clip-path: polygon(0 $guh, 100% $guh, 100% 100%, 0 100%);
			}
		}

		&.horizontal {
			width: 100%;

			input::-webkit-slider-thumb {
				height: var(--thumb-height);
				width: var(--thumb-width);
			}

			> .progress,
			> .remainder {
				block-size: var(--track-height);
			}

			> .progress {
				left: 0;
				width: $width-from-left;
				border-start-start-radius: util.$inf;
				border-end-start-radius: util.$inf;

				// * 1.5 to account for the fact that we start in it's center
				$guh: calc(100% - var(--thumb-width) * 1.5);

				clip-path: polygon(0 0, $guh 0, $guh 100%, 0 100%);
			}

			> .remainder {
				left: $width-from-left;
				right: 0;
				border-start-end-radius: util.$inf;
				border-end-end-radius: util.$inf;

				// * 1.5 to account for the fact that we start in it's center
				$guh: calc(var(--thumb-width) * 1.5);

				clip-path: polygon($guh 0, 100% 0, 100% 100%, $guh 100%);
			}
		}


		&:has(input:disabled) {
			> * {
				cursor: not-allowed;
			}

			input {
				&::-webkit-slider-thumb {
					background-color: util.alpha(var(--color-bg-fg) 50%);
				}
			}

			> .progress {
				background-color: util.alpha(var(--color-primary) 50%);
			}

			> .remainder {
				background-color: util.alpha(var(--color-bg-fg-700) 50%);
			}
		}

		&.xs {
			--thumb-height: 1rem;
			--thumb-width: .15rem;
		}

		&.sm {
			--thumb-height: 2rem;
		}

		&.md {
			--thumb-height: 2.5rem;
			--track-height: 2rem;
		}

		&.lg {
			--thumb-height: 4rem;
			--track-height: 3.5rem;
		}
	}
}
